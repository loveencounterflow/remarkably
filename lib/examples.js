// Generated by CoffeeScript 1.8.0
(function() {
  this.video = {
    about: "The `video_extension` recognizes `%[title](href)` markup and turns it into `<video>` tag (note:\nif you you want this to work in your own code, you must correct the rendering output, which is more\nimaginary than correct right nowâ€”this is a MarkDown syntax plugin example, not an HTML5\ntutorial...)",
    _matcher: /^%\[([^\]]*)\]\s*\(([^)]+)\)/,
    parse: function(state, silent) {
      var description, match;
      if (state.src[state.pos] !== '%') {
        return false;
      }
      match = this._matcher.exec(state.src.slice(state['pos']));
      if (match == null) {
        return false;
      }
      if (!silent) {
        description = {
          type: 'video',
          title: match[1],
          src: match[2],
          level: state.level
        };
        state.push(description);
      }
      state.pos += match[0].length;
      return true;
    },
    render: function(tokens, idx) {
      var src, title, _ref;
      _ref = tokens[idx], title = _ref.title, src = _ref.src;
      return "<video href='" + src + "'>" + title + "</video>";
    },
    extend: function(self) {
      self.inline.ruler.after('backticks', 'video', parse_video);
      self.renderer.rules['video'] = render_video;
      return null;
    }
  };

  this.emphasis = {
    about: "Recognizes markup with `=equals signs=` and translates them into a pair of `<em>...</em>`\ntags.",
    _chr: '=',
    parse: function(state, silent) {
      var chr, content, match_end, match_start, max, pos, pos_max, src, start, stop;
      if (state.src[state.pos] !== this._chr) {
        return false;
      }
      start = null;
      max = null;
      match_start = null;
      match_end = null;
      content = null;
      src = state.src, pos = state.pos, pos_max = state.posMax;
      if ((chr = src[pos]) !== this._chr) {
        return false;
      }
      start = pos;
      pos += 1;
      while (pos < pos_max && src[pos] !== this._chr) {
        pos += 1;
      }
      stop = pos;
      if (src[pos] !== this._chr) {
        return false;
      }
      if (stop === start + 1) {
        return false;
      }
      if (!silent) {
        state.push({
          type: 'emphasis',
          content: src.slice(start + 1, stop),
          block: false,
          level: state.level
        });
      }
      state.pos = stop + 1;
      return true;
    },
    render: function(tokens, idx) {
      var content;
      content = tokens[idx].content;
      return "<em>" + content + "</em>";
    },
    extend: function(self) {
      self.inline.ruler.after('backticks', 'emphasis', parse_emphasis);
      self.renderer.rules['emphasis'] = render_emphasis;
      return null;
    }
  };

  this.emphasis2 = {
    about: "Recognizes markup with `=single=` and `==repeated==` `===equals signs===` and translates them\ninto a pair of `<em>...</em>` tags.",
    _chr: '=',
    parse: function(state, silent) {
      var chr, content, match_end, match_start, max, pos, pos_max, src, start, stop;
      if (state.src[state.pos] !== this._chr) {
        return false;
      }
      start = null;
      max = null;
      match_start = null;
      match_end = null;
      content = null;
      src = state.src, pos = state.pos, pos_max = state.posMax;
      if ((chr = src[pos]) !== this._chr) {
        return false;
      }
      start = pos;
      pos += 1;
      while (pos < pos_max && src[pos] !== this._chr) {
        pos += 1;
      }
      stop = pos;
      if (src[pos] !== this._chr) {
        return false;
      }
      if (stop === start + 1) {
        return false;
      }
      if (!silent) {
        state.push({
          type: 'emphasis',
          content: src.slice(start + 1, stop),
          block: false,
          level: state.level
        });
      }
      state.pos = stop + 1;
      return true;
    },
    render: function(tokens, idx) {
      var content;
      content = tokens[idx].content;
      return "<em>" + content + "</em>";
    },
    extend: function(self) {
      self.inline.ruler.after('backticks', 'emphasis', parse_emphasis);
      self.renderer.rules['emphasis'] = render_emphasis;
      return null;
    }
  };

}).call(this);
