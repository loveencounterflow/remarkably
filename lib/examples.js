// Generated by CoffeeScript 1.8.0
(function() {
  this.emphasis = {
    name: 'emphasis',
    about: "Recognizes markup with `=equals signs=` and translates them into a pair of `<em>...</em>`\ntags.",
    _chr: '=',
    parse: function(state, silent) {
      var chr, content, match_end, match_start, max, pos, pos_max, src, start, stop;
      if (state.src[state.pos] !== this._chr) {
        return false;
      }
      start = null;
      max = null;
      match_start = null;
      match_end = null;
      content = null;
      src = state.src, pos = state.pos, pos_max = state.posMax;
      if ((chr = src[pos]) !== this._chr) {
        return false;
      }
      start = pos;
      pos += 1;
      while (pos < pos_max && src[pos] !== this._chr) {
        pos += 1;
      }
      stop = pos;
      if (src[pos] !== this._chr) {
        return false;
      }
      if (stop === start + 1) {
        return false;
      }
      if (!silent) {
        state.push({
          type: this.name,
          content: src.slice(start + 1, stop),
          block: false,
          level: state.level
        });
      }
      state.pos = stop + 1;
      return true;
    },
    render: function(tokens, idx) {
      var content;
      content = tokens[idx].content;
      return "<em>" + content + "</em>";
    },
    extend: function(self) {
      self.inline.ruler.after('backticks', this.name, this.parse);
      self.renderer.rules[this.name] = this.render;
      return null;
    }
  };

  this.emphasis2 = {
    name: 'emphasis2',
    about: "Recognizes markup with `=single=` and `==repeated==` `===equals signs===` and translates them\ninto a pair of `<em>...</em>` tags.",
    _chr: '=',
    parse: function(state, silent) {
      var chr, content, match_end, match_start, max, pos, pos_max, src, start, stop;
      if (state.src[state.pos] !== this._chr) {
        return false;
      }
      start = null;
      max = null;
      match_start = null;
      match_end = null;
      content = null;
      src = state.src, pos = state.pos, pos_max = state.posMax;
      if ((chr = src[pos]) !== this._chr) {
        return false;
      }
      start = pos;
      pos += 1;
      while (pos < pos_max && src[pos] !== this._chr) {
        pos += 1;
      }
      stop = pos;
      if (src[pos] !== this._chr) {
        return false;
      }
      if (stop === start + 1) {
        return false;
      }
      if (!silent) {
        state.push({
          type: this.name,
          content: src.slice(start + 1, stop),
          block: false,
          level: state.level
        });
      }
      state.pos = stop + 1;
      return true;
    },
    render: function(tokens, idx) {
      var content;
      content = tokens[idx].content;
      return "<em>" + content + "</em>";
    },
    extend: function(self) {
      self.inline.ruler.after('backticks', this.name, this.parse.bind(this));
      self.renderer.rules[this.name] = this.render.bind(this);
      return null;
    }
  };

}).call(this);
