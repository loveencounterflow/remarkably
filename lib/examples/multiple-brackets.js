// Generated by CoffeeScript 1.8.0
(function() {
  var BNP;

  BNP = require('coffeenode-bitsnpieces');

  this.about = "$name$ recognizes text stretches enclosed by multiple brackets.";

  this._get_multiple_bracket_pattern = function(opener, closer, arity, anchor) {
    var repeat_all, repeat_some;
    if (arity == null) {
      arity = 2;
    }
    if (anchor == null) {
      anchor = false;
    }
    opener = "(?:" + (BNP.escape_regex(opener)) + ")";
    closer = "(?:" + (BNP.escape_regex(closer)) + ")";
    anchor = anchor ? '^' : '';
    repeat_all = arity === 1 ? '' : "{" + arity + "}";
    repeat_some = arity === 1 ? '' : "{1," + arity + "}";
    return ("" + anchor + "\n(" + opener + repeat_all + "(?!" + opener + "))\n  ((?:\n    \\\\" + closer + "|\n    [^" + closer + "]|\n    " + closer + repeat_some + "(?!" + closer + ")\n  )*)\n  (" + closer + repeat_all + ")(?!" + closer + ")").replace(/\n\s*/g, '');
  };

  this._pattern = this._get_multiple_bracket_pattern('<', '>', 2, true);

  this._re = new RegExp(this._pattern, 'g');

  this.parse = function(state, silent) {
    var all, closer, content, match, opener, pos, src;
    src = state.src, pos = state.pos;
    this._re.lastIndex = pos;
    if (((match = this._re.exec(src)) == null) || match['index'] !== pos) {
      return false;
    }
    all = match[0], opener = match[1], content = match[2], closer = match[3];
    if (!silent) {
      state.push({
        type: this.name,
        opener: opener,
        closer: closer,
        content: content,
        block: false,
        level: state.level
      });
    }
    state.pos += all.length;
    return true;
  };

  this.render = function(tokens, idx) {
    var closer, content, d, opener, _ref;
    _ref = tokens[idx], content = _ref.content, opener = _ref.opener, closer = _ref.closer;
    d = opener.length;
    return "<em class='angled-" + d + "'>" + content + "</em>";
  };

  this.extend = function(self) {
    self.inline.ruler.before(self.inline.ruler['rules'][0]['name'], this.name, this.parse);
    self.renderer.rules[this.name] = this.render;
    return null;
  };

}).call(this);
