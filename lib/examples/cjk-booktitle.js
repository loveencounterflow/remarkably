// Generated by CoffeeScript 1.9.1
(function() {
  this.about = "$name$ recognizes markup with `<<double angled brackets>>` and `《CJK angled brackets》` and\ntranslates them into pairs of `<span class='book-title'>...</span>` tags.";

  $.text_quoted_triple_heavy_matcher = /^<<(?:\\<|[^<]|>(?!>))*>>/;

  this._openers = [/<</, /《/];

  this._closers = [/>>/, /》/];

  this._test_opener = function(src, pos) {
    return this._test(src, pos, this._openers);
  };

  this._test_closer = function(src, pos) {
    return this._test(src, pos, this._closers);
  };

  this._test = function(src, pos, matchers) {
    var i, idx, len, matcher;
    for (idx = i = 0, len = matchers.length; i < len; idx = ++i) {
      matcher = matchers[idx];

      /* TAINT any way to avoid building (many) substrings here? */
      if (matcher.test(src.slice(pos))) {
        return idx;
      }
    }
    return null;
  };

  this.parse = function(state, silent) {
    var content, match_end, match_start, max, opener_idx, pos, pos_max, src, start, stop;
    src = state.src, pos = state.pos, pos_max = state.posMax;
    if (!(opener_idx = this._test_opener(src, pos))) {
      return false;
    }
    start = null;
    max = null;
    match_start = null;
    match_end = null;
    content = null;
    if (src[pos] !== this._matcher) {
      return false;
    }
    start = pos;
    pos += 1;
    while (pos < pos_max && src[pos] !== this._matcher) {
      pos += 1;
    }
    stop = pos;
    if (src[pos] !== this._matcher) {
      return false;
    }
    if (stop === start + 1) {
      return false;
    }
    if (!silent) {
      state.push({
        type: this.name,
        content: src.slice(start + 1, stop),
        block: false,
        level: state.level
      });
    }
    state.pos = stop + 1;
    return true;
  };

  this.render = function(tokens, idx) {
    var content;
    content = tokens[idx].content;
    return "<span class='book-title'>" + content + "</span>";
  };

  this.extend = function(self) {
    self.inline.ruler.before(self.inline.ruler['rules'][0]['name'], this.name, this.parse);
    self.renderer.rules[this.name] = this.render;
    return null;
  };

}).call(this);
