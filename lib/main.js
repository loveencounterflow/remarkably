// Generated by CoffeeScript 1.8.0
(function() {
  var TEXT, TRM, alert, badge, debug, echo, glob, help, info, log, njs_path, rpr, urge, warn, whisper, _me;

  njs_path = require('path');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'REMARKABLY';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  TEXT = require('coffeenode-text');

  glob = require('glob');

  this.ReMarkable = require('remarkable');

  this._discover = function() {
    var R, collection_name, extension_name, globber, route, _i, _len, _ref;
    globber = njs_path.join(__dirname, './*/*.js');
    R = [];
    _ref = glob.sync(globber);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      route = _ref[_i];
      extension_name = ((njs_path.basename(route)).replace(/\.js$/, '')).replace(/-/g, '_');
      collection_name = (njs_path.basename(njs_path.dirname(route))).replace(/-/g, '_');
      R.push([collection_name, extension_name, route]);
    }
    return R;
  };

  this.get = {};

  _me = this;

  (function(_this) {
    return (function() {
      var collection_name, extension_name, route, _i, _len, _ref, _ref1, _results;
      _ref = _me._discover();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], collection_name = _ref1[0], extension_name = _ref1[1], route = _ref1[2];
        _results.push((function(collection_name, extension_name, route) {
          var _base;
          return ((_base = _me.get)[collection_name] != null ? _base[collection_name] : _base[collection_name] = {})[extension_name] = function(settings) {
            var R, full_name, method, method_name, _j, _len1, _ref2, _ref3;
            R = require(route);
            if (R.get != null) {
              R = R.get(settings);
            }
            full_name = "REMARKABLY/" + collection_name + "/" + extension_name;
            R['name'] = full_name;
            if (R['about'] == null) {
              R['about'] = ((_ref2 = R['about']) != null ? _ref2 : "(no documentation for $name$)").replace(/\$name\$/g, full_name);
            }
            _ref3 = ['parse', 'render', 'extend'];
            for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
              method_name = _ref3[_j];
              if ((method = R[method_name]) != null) {
                R[method_name] = method.bind(R);
              }
            }
            return R;
          };
        })(collection_name, extension_name, route));
      }
      return _results;
    });
  })(this)();

  this.use = function(remarkable_parser, extension) {
    return remarkable_parser.use(extension.extend);
  };

  this.main = function() {
    var RM, RMY, angles, braces, emphasis, emphasis2, enable, html, settings, source, video;
    RMY = this;
    enable = 'full';
    settings = {
      html: true,
      xhtmlOut: false,
      breaks: false,
      langPrefix: 'language-',
      linkify: true,
      typographer: true,
      quotes: '“”‘’'
    };
    RM = new RMY.ReMarkable(enable, settings);
    RMY.use(RM, video = RMY.get.examples.video());
    RMY.use(RM, emphasis = RMY.get.examples.emphasis());
    RMY.use(RM, emphasis2 = RMY.get.examples.emphasis2());
    RMY.use(RM, angles = RMY.get.examples.brackets({
      opener: '<',
      closer: '>',
      arity: 2,
      name: 'angles'
    }));
    RMY.use(RM, braces = RMY.get.examples.brackets({
      opener: '{',
      closer: '}',
      arity: 2,
      name: 'braces'
    }));
    debug('©5t2', angles);
    debug('©5t2', braces);
    debug('©5t2', braces === angles);
    source = "=This= ==is== ===very=== _awesome_(c): %[example movie](http://example.com)\n*A* **B** ***C*** ****D****\n\nthese are <<angle brackets>> and {{braces}}.\n\n***E**** [link \\[title\\]](link-URL)\n\n****F***";
    whisper(source);
    return info(html = RM.render(source));
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);
