// Generated by CoffeeScript 1.9.1
(function() {
  var TEXT, TRM, TYPES, alert, badge, debug, echo, glob, help, info, log, njs_path, rpr, urge, warn, whisper,
    slice = [].slice;

  njs_path = require('path');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'REMARKABLY';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  TEXT = require('coffeenode-text');

  TYPES = require('coffeenode-types');

  glob = require('glob');

  this.ReMarkable = require('remarkable');

  this._terminator_chrs = (require('remarkable-dev/lib/rules_inline/text'))['terminatorChrs'];

  this._discover = function() {
    var R, collection_name, extension_name, globber, i, len, ref, route;
    globber = njs_path.join(__dirname, './*/*.js');
    R = [];
    ref = glob.sync(globber);
    for (i = 0, len = ref.length; i < len; i++) {
      route = ref[i];
      extension_name = ((njs_path.basename(route)).replace(/\.js$/, '')).replace(/-/g, '_');
      collection_name = (njs_path.basename(njs_path.dirname(route))).replace(/-/g, '_');
      R.push([collection_name, extension_name, route]);
    }
    return R;
  };

  this._extend = function(collection_name, extension_name, route) {
    var base, getter, target;
    getter = (function(_this) {
      return function(settings) {
        var R, about, chr, chrs, extension, i, j, len, len1, method, method_name, name, ref, terminators;
        extension = require(route);
        R = extension.get != null ? extension.get(settings) : extension;
        name = R['name'] != null ? R['name'] : R['name'] = "REMARKABLY/" + collection_name + "/" + extension_name;
        about = R['about'] != null ? R['about'] : R['about'] = "(no documentation for $name$)";
        R['about'] = about.replace(/\$name\$/g, name);
        if ((terminators = R.terminators) != null) {
          chrs = TYPES.isa_list(terminators) ? terminators : TEXT.split(terminators);
          for (i = 0, len = chrs.length; i < len; i++) {
            chr = chrs[i];
            _this._terminator_chrs[chr] = true;
          }
        }
        ref = ['parse', 'render', 'extend'];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          method_name = ref[j];
          if ((method = R[method_name]) != null) {
            R[method_name] = method.bind(R);
          }
        }
        return R;
      };
    })(this);
    target = (base = this.get)[collection_name] != null ? base[collection_name] : base[collection_name] = {};
    target[extension_name] = getter;
    return null;
  };

  this.get = {};

  (function(_this) {
    return (function() {
      var collection_name, extension_name, i, len, ref, ref1, results, route;
      ref = _this._discover();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], collection_name = ref1[0], extension_name = ref1[1], route = ref1[2];
        results.push(_this._extend(collection_name, extension_name, route));
      }
      return results;
    });
  })(this)();

  this.use = function(remarkable_parser, extension) {
    return remarkable_parser.use(extension.extend);
  };

  this.new_parser = function() {
    var P;
    P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(this.ReMarkable, P, function(){});
  };

  this.main = function() {
    var RM, RMY, angles, braces, brackets, emphasis, emphasis2, enable, html, settings, smh, source, video;
    RMY = this;
    enable = 'full';
    settings = {
      html: true,
      xhtmlOut: false,
      breaks: false,
      langPrefix: 'language-',
      linkify: true,
      typographer: true,
      quotes: '“”‘’'
    };
    RM = RMY.new_parser(enable, settings);
    RMY.use(RM, video = RMY.get.examples.video());
    RMY.use(RM, emphasis = RMY.get.examples.emphasis());
    RMY.use(RM, emphasis2 = RMY.get.examples.emphasis2());
    RMY.use(RM, braces = RMY.get.examples.brackets({
      opener: '{',
      closer: '}',
      arity: 2,
      name: 'braces'
    }));
    RMY.use(RM, angles = RMY.get.examples.brackets({
      opener: '<',
      closer: '>',
      arity: 2,
      name: 'angles'
    }));
    RMY.use(RM, brackets = RMY.get.examples.brackets({
      opener: '[',
      closer: ']',
      arity: 3,
      name: 'brackets-3'
    }));
    RMY.use(RM, smh = RMY.get.examples.brackets({
      opener: '《',
      closer: '》',
      arity: 1,
      name: 'book-title'
    }));
    RMY.use(RM, RMY.get.examples.brackets({
      opener: '+',
      closer: '+',
      arity: 1,
      name: 'plus-1'
    }));
    RMY.use(RM, RMY.get.examples.brackets({
      opener: '+',
      closer: '+',
      arity: 2,
      name: 'plus-2'
    }));
    RMY.use(RM, RMY.get.examples.brackets({
      opener: '+',
      closer: '+',
      arity: 3,
      name: 'plus-3'
    }));
    RMY.use(RM, RMY.get.examples.brackets({
      opener: '+',
      closer: '+',
      arity: 4,
      name: 'plus-4'
    }));
    RMY.use(RM, RMY.get.examples.newline({
      matcher: '$$'
    }));
    RMY.use(RM, RMY.get.examples.xncrs());
    debug(this._terminator_chrs);
    source = "=This= ==is== ===very=== _awesome_(c): %[example movie](http://example.com)\n*A* **B** ***C*** ****D****\n\nA line$$with a newline.\n\nA non-standard, namespaced XNCR: &jzr#xe100;\n\nHere are\n* <<double pointy brackets>>,\n* {{double braces}},\n* [[[triple square brackets]]],\n* +single plus signs+,\n* ++double plus signs++,\n* +++triple plus signs+++,\n* ++++quadruple plus signs++++,\n* 也可以用 《中文書名号》 。".trim();
    whisper(source);
    return info(html = RM.render(source));
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);
