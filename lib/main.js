// Generated by CoffeeScript 1.8.0
(function() {
  var TEXT, TRM, alert, badge, debug, echo, get, glob, help, info, log, njs_path, rpr, urge, warn, whisper, _me;

  njs_path = require('path');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'REMARKABLY';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  TEXT = require('coffeenode-text');

  glob = require('glob');

  this._discover = function() {
    var R, collection_name, extension_name, globber, route, _i, _len, _ref;
    globber = njs_path.join(__dirname, './*/*.js');
    R = [];
    _ref = glob.sync(globber);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      route = _ref[_i];
      extension_name = (njs_path.basename(route)).replace(/\.js$/, '');
      collection_name = njs_path.basename(njs_path.dirname(route));
      R.push([collection_name, extension_name, route]);
    }
    return R;
  };

  _me = this;

  get = this.get = {};

  (function(_this) {
    return (function() {
      var collection_name, extension_name, route, _i, _len, _ref, _ref1, _results;
      _ref = _me._discover();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], collection_name = _ref1[0], extension_name = _ref1[1], route = _ref1[2];
        _results.push((function(collection_name, extension_name, route) {
          return (get[collection_name] != null ? get[collection_name] : get[collection_name] = {})[extension_name] = function() {
            var R, extension, full_name, method, method_name, _j, _len1, _ref2, _ref3;
            extension = require(route);
            full_name = "REMARKABLY/" + collection_name + "/" + extension_name;
            extension['name'] = full_name;
            _ref2 = ['parse', 'render', 'extend'];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              method_name = _ref2[_j];
              if ((method = extension[method_name]) != null) {
                extension[method_name] = method.bind(extension);
              }
            }
            R = extension.extend;
            R['name'] = full_name;
            R['about'] = ((_ref3 = extension.about) != null ? _ref3 : "(no documentation)").replace(/\$name\$/g, full_name);
            return R;
          };
        })(collection_name, extension_name, route));
      }
      return _results;
    });
  })(this)();

  this.use = function(remarkable_parser, extension) {
    return remarkable_parser.use(extension);
  };

  this.main = function() {
    var RM, RMY, ReMarkable, emphasis, emphasis2, enable, html, settings, source, video;
    RMY = this;
    ReMarkable = require('remarkable');
    enable = 'full';
    settings = {
      html: true,
      xhtmlOut: false,
      breaks: false,
      langPrefix: 'language-',
      linkify: true,
      typographer: true,
      quotes: '“”‘’'
    };
    RM = new ReMarkable(enable, settings);
    RMY.use(RM, video = RMY.get.examples.video());
    RMY.use(RM, emphasis = RMY.get.examples.emphasis());
    RMY.use(RM, emphasis2 = RMY.get.examples.emphasis2());
    debug(emphasis2);
    source = "=This= ==is== ===very=== §awesome§(c): %[example movie](http://example.com)";
    info(html = RM.render(source));
    help();
    help(emphasis.about);
    help();
    help(emphasis2.about);
    help();
    return help(video.about);
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);
